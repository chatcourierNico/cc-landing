// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iDYYucUMnPTZtZHWq6wa5S
// Component: IK4n_dCaMmgI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: cBTh31AHb-LG/component
import Button from "../../Button"; // plasmic-import: fciyd94IYsUr/component
import Section from "../../Section"; // plasmic-import: _NfAvEpiXsSV/component
import PriceCard from "../../PriceCard"; // plasmic-import: f9fPDYp4wcZP/component
import FooterSection from "../../FooterSection"; // plasmic-import: RDmjjJMIyHGE/component

import { useScreenVariants as useScreenVariants_6VyeGjXripsv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6VYEGjXRIPSV/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: iDYYucUMnPTZtZHWq6wa5S/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: IK4n_dCaMmgI/css

import IconArrowRightsvgIcon from "./icons/PlasmicIcon__IconArrowRightsvg"; // plasmic-import: b4UZy3ELoSQe/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerHeroSection?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  h1?: Flex__<"h1">;
  startSection?: Flex__<typeof Section>;
  h3?: Flex__<"h3">;
  pricingSection?: Flex__<typeof Section>;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6VyeGjXripsv()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__yg77U)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eUmQh)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fRa6)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Analytics for developers can be better"
                      : "One chat to rule them all"}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wYnpy
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                      : "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dexaP)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__blVab
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "blueSmall"
                          : "blue"
                      }
                      endIcon={
                        <IconArrowRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__wZvzq)}
                          role={"img"}
                        />
                      }
                      link={"#"}
                      showEndIcon={true}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__sgCGw)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ctXvv
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Try Demo For Free"
                          : "Try Demo For Free"}
                      </div>
                    </Button>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__wE75X
                      )}
                      color={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "blueBorderSmall"
                          : "blueBorder"
                      }
                      endIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___5LdJ9
                          )}
                          role={"img"}
                        />
                      }
                      link={"#"}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__gbwnO)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eFjdU
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Learn More"
                          : "Learn More"}
                      </div>
                    </Button>
                  </Stack__>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uxePn)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__stnjj
                        )}
                        color={"blueBorder"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__yfAU
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__cdKwu
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        {"Learn More"}
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__kRwda
                        )}
                        color={"blueBorder"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tcz0Y
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__zlZjy
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        {"Learn More"}
                      </Button>
                    </div>
                  ) : null}
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5HYzt)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__echoB)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "0px"
                        : "661px"
                    }
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/dark_saa_s_landing_page/images/diagramsvg.svg",
                      fullWidth: 173,
                      fullHeight: 150,
                      aspectRatio: 1.151631
                    }}
                  />
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u8Hui
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Powering with magnificant of Companies"
                  : "Powering with magnificant of Companies"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fKp7Q)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__e6Pv3)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "170px"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/logoHero1Png.png",
                    fullWidth: 233,
                    fullHeight: 50,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___9P78Q)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "170px"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/logoHero2Png.png",
                    fullWidth: 189,
                    fullHeight: 50,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hpfga)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "170px"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/logoHero3Png.png",
                    fullWidth: 194,
                    fullHeight: 50,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qe0Ev)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "170px"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/dark_saa_s_landing_page/images/logoHero4Png.png",
                    fullWidth: 189,
                    fullHeight: 50,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </div>
          </Stack__>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___9O00P)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/dark_saa_s_landing_page/images/diagramImgsvg.svg",
              fullWidth: 300,
              fullHeight: 100,
              aspectRatio: 2.987552
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__mdZOs)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"774px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/dark_saa_s_landing_page/images/ellipseLeftpng.png",
              fullWidth: 469,
              fullHeight: 742,
              aspectRatio: undefined
            }}
          />

          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___63Y4N)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/dark_saa_s_landing_page/images/ellipseRightpng.png",
              fullWidth: 437,
              fullHeight: 742,
              aspectRatio: undefined
            }}
          />

          <Section
            data-plasmic-name={"startSection"}
            data-plasmic-override={overrides.startSection}
            className={classNames("__wab_instance", sty.startSection)}
            size={"fullContentWidth"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jCZxd)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z0NiC)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/dark_saa_s_landing_page/images/pricingImgsvg.svg",
                  fullWidth: 300,
                  fullHeight: 67,
                  aspectRatio: 4.468401
                }}
              />

              <div className={classNames(projectcss.all, sty.columns__ummrz)}>
                <div className={classNames(projectcss.all, sty.column__jNyHl)}>
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Start using our product today"
                      : "Start using our product today"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hKz11
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."
                      : "Faster than free analytics tools. Access to all your data, with respect to the privacy of your users."}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__qX5H)}>
                  <Button
                    className={classNames("__wab_instance", sty.button___3KoUo)}
                    color={"white"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__seUu8)}
                        role={"img"}
                      />
                    }
                    link={"#"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__jmfP5)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8PnzO
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Get Started"
                        : "Get Started"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>
          </Section>
          <Section
            data-plasmic-name={"pricingSection"}
            data-plasmic-override={overrides.pricingSection}
            className={classNames("__wab_instance", sty.pricingSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tekOq)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__mtGfa)}
              >
                <div className={classNames(projectcss.all, sty.column__lo6Tz)}>
                  <PriceCard
                    borders={["flatLeft"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__dpH5W
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__t3OuG)}>
                  <PriceCard
                    borders={["flatCenter"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard___0RsKd
                    )}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wBiDd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ilrNc
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "We Recommended"
                        : "We Recommended"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__u6Ba)}>
                  <PriceCard
                    borders={["flatRight"]}
                    className={classNames(
                      "__wab_instance",
                      sty.priceCard__pnnyd
                    )}
                  />
                </div>
              </Stack__>
            </div>
          </Section>
          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "h1",
    "startSection",
    "h3",
    "pricingSection",
    "footerSection"
  ],
  headerHeroSection: ["headerHeroSection", "navbar", "h1"],
  navbar: ["navbar"],
  h1: ["h1"],
  startSection: ["startSection", "h3"],
  h3: ["h3"],
  pricingSection: ["pricingSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  h1: "h1";
  startSection: typeof Section;
  h3: "h3";
  pricingSection: typeof Section;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    h1: makeNodeComponent("h1"),
    startSection: makeNodeComponent("startSection"),
    h3: makeNodeComponent("h3"),
    pricingSection: makeNodeComponent("pricingSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
